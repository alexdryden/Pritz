# Generated by Django 2.1.5 on 2019-05-05 15:52
from __future__ import unicode_literals
from itertools import chain

from django.db import migrations


def populate_permissions_lists(apps):
    permission_class = apps.get_model('auth', 'Permission')

    member_permissions = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                             content_type__model='member')

    judge_permissions = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                          content_type__model='judge')

    author_permissions = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                                  content_type__model='author')

    year_permissions = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                                  content_type__model='year')

    rating_permissions = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                           content_type__model='rating')

    candidate_permissions = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                          content_type__model='candidate')

    vote_permissions = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                               content_type__model='vote')

    perm_view_member = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                           content_type__model='member',
                                                           codename='view_member')

    perm_view_judge = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                        content_type__model='judge',
                                                        codename='view_judge')

    perm_view_author = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                               content_type__model='author',
                                                               codename='view_author')

    perm_view_year = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                               content_type__model='year',
                                                               codename='view_year')

    perm_view_rating = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                         content_type__model='rating',
                                                         codename='view_rating')


    perm_view_candidate = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                        content_type__model='candidate',
                                                        codename='view_candidate')

    perm_view_vote = permission_class.objects.filter(content_type__app_label='webVotingApp',
                                                             content_type__model='vote',
                                                             codename='view_vote')

    wva_member_permissions = chain(perm_view_member,
                                   perm_view_author,
                                   perm_view_year,
                                   perm_view_candidate,
                                   rating_permissions)

    wva_selection_committee_permissions = chain(author_permissions,
                                                year_permissions,
                                                perm_view_candidate,
                                                perm_view_member,
                                                perm_view_judge)

    wva_coordinator_permissions = chain(judge_permissions,
                                       perm_view_member,
                                       member_permissions,
                                       candidate_permissions,
                                       perm_view_author,
                                       perm_view_year,
                                       perm_view_rating,
                                       perm_view_vote)

    wva_judge_permissions = chain(vote_permissions)

    my_groups_initialization_list = [
        {
            "name": "wva_member",
            "permissions_list": wva_member_permissions,
        },
        {
            "name": "wva_selection_committee",
            "permissions_list": wva_selection_committee_permissions,
        },
        {
            "name": "wva_coordinator",
            "permissions_list": wva_coordinator_permissions,
        },
        {
            "name": "wva_judge",
            "permissions_list": wva_judge_permissions
        }
    ]
    return my_groups_initialization_list


def add_group_permissions_data(apps, schema_editor):
    groups_initialization_list = populate_permissions_lists(apps)

    Group = apps.get_model('auth', 'Group')
    for group in groups_initialization_list:
        if group['permissions_list'] is not None:
            group_object = Group.objects.get(
                name=group['name']
            )
            group_object.permissions.set(group['permissions_list'])
            group_object.save()


def remove_group_permissions_data(apps, schema_editor):
    groups_initialization_list = populate_permissions_lists(apps)

    Group = apps.get_model('auth', 'Group')
    for group in groups_initialization_list:
        if group['permissions_list'] is not None:
            group_object = Group.objects.get(
                name=group['name']
            )
            list_of_permissions = group['permissions_list']
            for permission in list_of_permissions:
                group_object.permissions.remove(permission)
                group_object.save()


class Migration(migrations.Migration):

    dependencies = [
        ('webVotingApp', '0017_make_groups'),
    ]

    operations = [
        migrations.RunPython(
            add_group_permissions_data,
            remove_group_permissions_data
        )
    ]
